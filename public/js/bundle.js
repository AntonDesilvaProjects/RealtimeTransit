!function(t){var e={};function n(r){if(e[r])return e[r].exports;var a=e[r]={i:r,l:!1,exports:{}};return t[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(r,a,function(e){return t[e]}.bind(null,a));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);const r="https://shielded-sands-79374.herokuapp.com",a={LIST_TRIP_UPDATES:r+"/transit/mta/subway/trips/list",LIST_STATIONS:r+"/transit/mta/subway/stations"},i={groupBy:(t,e)=>t.reduce((t,n)=>{let r="function"==typeof e?e(n):n[e];return t.has(r)?t.get(r).push(n):t.set(r,[n]),t},new Map),isEmpty:t=>!t||0===t.length,isNotEmpty:t=>!i.isEmpty(t)};class s{constructor(t){this.id=t}}const o=t=>{if(i.isEmpty(t))return"<span>No route information available!</span>";const e=(t,e)=>{if(i.isEmpty(e))return"n/a";let n=e.map(t=>t.arrivingIn).sort((t,e)=>t-e);return`${n[0]}(${n.slice(1,t).join(",")}) mins`.replace("()","")};return`\n\t\t<table class="trip-grid">\n\t\t\t${t.map(t=>`\n\t\t\t\t\t\t<tr>\n\t\t\t\t             <td>\n\t\t\t\t                 <div class="route">\n\t\t\t\t                     <div class="route-name">${t.routeId}</div>\n\t\t\t\t                     <div class="route-trips">\n\t\t\t\t                         <div>\n\t\t\t\t                             <span>${t.north.destination}</span>\n\t\t\t\t                             <span class="time">${e(3,t.north.trips)}</span>\n\t\t\t\t                         </div>\n\t\t\t\t                         <div>\n\t\t\t\t                             <span>${t.south.destination}</span>\n\t\t\t\t                             <span class="time">${e(3,t.south.trips)}</span>\n\t\t\t\t                         </div>\n\t\t\t\t                     </div>\n\t\t\t\t                 </div>\n\t\t\t\t             </td>\n\t\t\t\t        </tr>\n\t\t\t\t\t`).join("")}\n\t\t </table>\n\t`};var c=t=>{const e=`\n\t\t<div class="stop">\n\t    \t<div class="stop-info">\n\t            <div class="stop-name">\n\t                <span>${t.name}</span>\n\t            </div>\n\t            <div class="stop-updates">${o(t.routes)}</div>\n\t        </div>\n\t        <div class="additional-info">\n\t            <div>\n\t                F train - status: good\n\t            </div>\n\t            <div>\n\t                Additional Arrival Times\n\t            </div>\n\t        </div>\n\t    </div>`,n=document.querySelector(".search-results-tbody");if(n){n.insertRow().innerHTML="<td>"+e+"</td>"}};const d=new class{fetchTripUpdates(t){let e=new URLSearchParams({...t});return fetch(a.LIST_TRIP_UPDATES+"?"+e).then(t=>t.json()).then(t=>t instanceof Array?t:Promise.reject(t))}mapTripToStops(t,e){let n=[];t.forEach(t=>{t.tripUpdates&&t.tripUpdates.filter(t=>!e||t.matchedSearch).forEach(e=>n.push({routeId:t.routeId,destination:t.destination,direction:t.direction,stopName:e.subwayStation.name,stopId:e.subwayStation.gtfsStopId,arrivalTime:e.arrivalTime,arrivingIn:Math.ceil(e.arrivingIn/6e4)}))});let r=i.groupBy(n,"stopId"),a=[];return r.forEach((t,e)=>{if(i.isNotEmpty(t)){let n=new s(e);n.name=t[0].stopName,n.routes=[],i.groupBy(t,"routeId").forEach((t,e)=>{const r=i.groupBy(t,"direction"),a=r.get("NORTH"),s=i.isEmpty(a)?null:a[0].destination,o=r.get("SOUTH"),c=i.isEmpty(o)?null:o[0].destination;n.routes.push({routeId:e,north:{trips:a,destination:s},south:{trips:o,destination:c}})}),a.push(n)}}),a}};d.fetchTripUpdates({stopIds:["F06","G07","D15"]}).then(t=>{(d.mapTripToStops(t,!0)||[]).forEach(c)},t=>console.log(t.message)),console.log(i.groupBy([{key:1,value:"a"},{key:1,value:"b"},{key:2,value:"b"}],t=>t.key)),console.log(i.isEmpty([1])),(new class{constructor(){this.mainSearchBar=document.querySelector(".main-search-bar"),this.mainSearchBarDataList=document.getElementById("main-search-bar-options"),this.registerEventHandlers()}loadSearchBar(){fetch(a.LIST_STATIONS).then(t=>(t.ok||Promise.reject("Unexpected error while fetching search options!"),t.json())).then(this.populateSearchBar.bind(this)).catch(t=>console.log(t))}populateSearchBar(t){this.mainSearchBarDataList&&t.forEach(t=>{const e=document.createElement("option");e.value=t.name,e.innerHTML=`${t.borough}: ${t.dayTimeRoutes.join(", ")}`,e.setAttribute("data-stationId",t.gtfsStopId),this.mainSearchBarDataList.appendChild(e)})}registerEventHandlers(){this.mainSearchBar.addEventListener("input",this.onSearchInput.bind(this))}onSearchInput(t){InputEvent}generateSearchParams(){const t=this.mainSearchBar.value;if(t){Array.from(this.mainSearchBarDataList.childNodes).filter(e=>e.value===t)[0].dataset.stationid}const e=document.querySelector(".search-filter");if(e){Array.from(e.children()).forEach(t=>{t.classList.contains("search-filter-routes")&&i.isEmpty(t.value)})}return{}}}).loadSearchBar()}]);